---
title: "2025-01-30 Notes"
format: html
editor: visual
---

###Notes for today

%\>% This is the pipe operator which takes the result of one operation and passes it to another operation. Line 27 below shows how the pipe operator is used to pipe the arrange() tool onto the data frame

Important to note the importance of shifting between datas structures (ex: data frame vs tibble), different functionalities depending on what you want to do. Some things work with data frames but not tibbles and vice a versa, ex in line 36

```{r}
getwd()

library(tidyverse)
f <- file.choose()
df <- read_csv(f, col_names = TRUE)
head(df)
glimpse(df)
names(df)

df$country
median(df$area, na.rm = TRUE) #gives median area, need to specify the na.rm as true
#because there are NA values
median(df$population, na.rm = TRUE)
df$popDensity <- df$population / df$area #by having the df$ before the name of the variable
#it adds it into the data frame
#ranking in order of density
df <- df %>%
  arrange(desc(popDensity)) #this is a better way to rearrange the data 
#because it actually changes it in the table
head(df, 10)
tail(df, 10)
str(df)
df <- as.data.frame(df)
```

data.table is just a different version of data frame. {data.table} is a more efficient way at analysis. Again everything depends on how you are looking at it. Everything is tabular data structures. Usually using everything as tibbles until you need something else (default for {tidyverse})

##Data wrangling Play in Class PRIMATE DATA RAHHHHHHHHH

Look at useful functions section for functions which give descriptions and attributes of data being loaded in

SPECIAL VALUES: R has 3 special values 1. NA (not available) used for missing data 2. Inf (and -Inf) used when result is too extreme for R to express 3. NaN (not a number) for when R cannot express the results of a calculation, ex square root of negative number

FUNCTIONS: Learning to use attach(), detach(), and with()

attach() lets us use variable names directly, so you dont have to do d\$xyz

detach() removes the variable names, so then you do have to do d\$xyz after detaching

with() is like local version of attach, ex: with this data frame, do this, not attached or detached

```{r}
library(tidyverse)
f <- "https://raw.githubusercontent.com/difiore/ada-datasets/refs/heads/main/KamilarAndCooperData.csv"
d <- read_csv(f, col_names = TRUE) #Reads file in as a tibble
#Useful functions, all used to learn different attributed about the data
head(d)
tail(d)
str(d)
glimpse(d)
dim(d)
names(d)
colnames(d)
rownames(d)
summarize(d)
attach(d)
mean(Brain_Size_Female_Mean, na.rm = TRUE)
detach(d)
mean(d$Brain_Size_Female_Mean, na.rm = TRUE)

with(d, mean(Body_mass_female_mean, na.rm = TRUE))
```

\##"Tidy" Data Way of thinking about how tabular data is organized so each variable has a column and each observation has a row, how most of our data has been, such as d which we used above

Not always efficient depening on what you are working with, like if you are using a spreadsheet or writing out your data

Here is how we can do some summaries first skim() give a nice and imformative output, better than summarize() does. skim() makes histograms at the end, can be good for initial look at data!!!

```{r}
summarize(d) #five-number summary plus mean and number of NAs

library(skimr) #holds skim() function
skim(d) #also creates a summary of the data
```

##Visualizations
Boxplots are one way to do this. boxplot() is how we do this, it can be adjuted to have wiskers of different lengths. For below, need to run it all together, the strip chart plots the values on top of the box plot which already exists

We can also use ggplot in {ggplot2} to plot data. ggplot is more generic than boxplot() and you can tell it what kind of geometry you want to plot. Need to give it (1) the data, (2) the mapping of data aesthetics, (3) a geometry or the kind of plot, and optionally (4) a theme. 1-3 are required to produce a plot

```{r}
boxplot(log(d$Body_mass_female_mean) ~ d$Family)
stripchart(log(d$Body_mass_female_mean) ~ d$Family, method = "jitter", col = "blue",
           vertical = TRUE, add = TRUE)

library(ggplot2)
ggplot(data = d, mapping = aes( x = "", y = log(Body_mass_female_mean))) +
  geom_boxplot(na.rm = TRUE)
```


