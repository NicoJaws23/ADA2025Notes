---
title: "2025-02-04"
format: html
editor: visual
---

## Notes for 2025-02-04, More Data Wrangling WOOP WOOP

Next exercise: Programming wordle, ex 04, lot of data wrangling/manipulation and writing functions, start looking at ex 4 (can word with a buddy on it)

Start looking for a data analysis replication assignment and share pdf with tony, needs to be a study which has the raw data availiable (maybe chris' paper used for fall core project??)

Work through module 11/12 (descriptive stats)

Using Kamilar and Coooper data today

```{r}
library(tidyverse)
f <- "https://raw.githubusercontent.com/difiore/ada-datasets/refs/heads/main/KamilarAndCooperData.csv"
d <- read_csv(f, col_names = TRUE) #Reads file in as a tibble

library(ggplot2) #grammar of graphics package
ggplot(data = d, aes(x = log(Body_mass_female_mean), y = log(Brain_Size_Female_Mean))) +
  geom_point() #the geom_point() create the geometry of the plot
```

ggplot is really useful because there are a lot of extensions available to it from other packages

It is also good to add regression lines to plots, ggplot can do that using geom_smooth(), see below. NOTE online help (stackoverflow) is helpful for figuring out plots in a pinch lol

```{r}
#adding regression line
ggplot(data = d, aes(x = log(Body_mass_female_mean), y = log(Brain_Size_Female_Mean))) +
  geom_point(na.rm= TRUE) + #create the geometry for how the data will be visualized
  geom_smooth(method= "lm", na.rm = TRUE)

```

Also, you can add data from other data sets on top of the one you have with other data, ex: x axis comes from one data set, y axis comes from another. Thing of note, with how much stuff can be nested within a ggplot set up, keeping track of parenthesis can be hard

```{r}
ggplot(data = d, aes(x = log(Body_mass_female_mean), y = log(Brain_Size_Female_Mean))) +
  geom_point(na.rm= TRUE) + #create the geometry for how the data will be visualized
  geom_smooth(method= "lm", na.rm = TRUE) +
  geom_point(data = d, aes( x = log(Body_mass_female_mean), y = log(Body_mass_male_mean)))
```

ggplot has a number of different arguments which can be passed to the function, dont always need to have specific argument data = d, R will assume that d is the data if you dont have the data = as long as d is in the correct position

NOTE: R doesnt care about white space like how python does, so there can be as much space/lines between things as you want as long as they are joined by something (+, %\>%)

HEY: cowplot function plot_grid() lets you plot multiple plots at the same time/view. Need to assign plots made in ggplot into variables

To keep in mind, there are different geometries for just about everything

# Data Wrangling Time RAHHHH

-   filter() extracts rows that meet logical criteria

    -   filter(mtcars, mpg \> 20) pulls all rows where mpg column is over 20

-   select() extract columns as a table

    -   select(mtcars, mpg, wt) pulls out the 2 columns mpg and wt

-   arrange() Orders rows by values of a column or columns (low to high), use desc to order from high to low

    -   arrange(mtcars, mpg) arranges data by mpg from low to high

    -   arrange(mtcars, desc(mpg)) arranges data from high to low

-   group_by() creates a "grouped" copy of a table group by columns in data

-   summarise() creates a new table of summary stats. Can take vectors as input and return one values. Can compress rows of a data set grouped together and get a values of different stats (ex: mean, median, mode)

-   mutate() lets you create new variables within the dataframe, SUPER useful for updating datasets, ex: combining genus and species names

-   Can combine these functions together to effectively manipulate data, order is important

-   First argument in each of these is understood by the function as the dataset, other arguments are the columns you want to pull out

-   Pipe operator allows you to not have to set data argument, makes it easier to pass through functions (think about what you did for denne's class). Can also pipe particular variables into a dataset

-   NOTE: This pipe operator, %\>%, requires that {tidyverse} is loaded in. \|\> is the native pipe operator and does not require a library to be loaded in

    First we will use some of these functions using {base} r

    ```{r}
    s <- d[d$Family == "Hominidae" & d$Mass_Dimorphism > 2,] #this is a filter function in {base} r
    s <- d[, c("Family", "Genus", "Body_mass_male_mean")] #this is a select function
    s <- d[order(d$Family, d$Genus, -d$Body_mass_male_mean),]#this sorts these three variables in
    #order of descending body size
    s <- aggregate(d$Body_mass_female_mean ~ d$Family, FUN = "mean", na.rm = TRUE)

    ```

and here we will use {dplyr} tools, which are more readble for someone else using your code

```{r}
library(dplyr)
s2 <- filter(d, Family == "Hominidae" & Mass_Dimorphism > 2) #This is the filter function using filter() in {dplyr}
s2 <- select(d, Family, Genus, Body_mass_male_mean) #This is the select() function
s2 <- arrange(d, Family, Genus, desc(Body_mass_male_mean)) #this uses arrange() to sort these 3 variable
#by descening body mass
s2 <- summarise(group_by(d, Family), avgF = mean(Body_mass_female_mean, na.rm = TRUE)) #summarises
#average female body mass by family

```

# Flow Control and Looping

Conditionals, how to make code do something by testing a condition

-   if (test) {do this} else {do that}

-   ifelse(test, do this if true, do this if false) #this is the dplyr version of the above {base version}

-   if_else(test, do this if true, do this if false) #used in the context of data frames

-   case_when (

    -   case1 \~ result1,

    -   case2 \~ result2,

    -   case3 \~ result3,

    -   TRUE \~ all other

-   ) #This is good if you have multiple conditions you are testing

```{r}
#load in the imdb move data
f <- "https://raw.githubusercontent.com/difiore/ada-datasets/refs/heads/main/IMDB-movies.csv"
d <- read_csv(f, col_names = TRUE)
head(d)

#adding new variable
```
